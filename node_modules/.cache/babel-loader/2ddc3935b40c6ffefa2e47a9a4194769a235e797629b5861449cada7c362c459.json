{"ast":null,"code":"module.exports = function () {\n  class Record {\n    constructor(options) {\n      ;\n      ({\n        id: this.id,\n        type: this.type,\n        attributes: this.attributes,\n        relationships: this.relationships,\n        links: this.links,\n        meta: this.meta\n      } = options);\n    }\n  }\n  class Store {\n    //eslint-disable-next-line no-unused-vars\n    constructor(options) {\n      this.reset();\n    }\n    reset() {\n      this.records = [];\n    }\n    toModel(rec, type, models) {\n      let typeAttribute;\n      const model = {\n        ...(rec.attributes || {})\n      };\n      if (model.type) {\n        typeAttribute = model.type;\n      }\n      model.id = rec.id;\n      model.type = rec.type;\n      if (!models[type]) {\n        models[type] = {};\n      }\n      if (!models[type][rec.id]) {\n        models[type][rec.id] = model;\n      }\n      if (Object.prototype.hasOwnProperty.call(model, 'meta')) {\n        model.attributes = {\n          meta: model.meta\n        };\n        delete model.meta;\n      }\n      if (rec.meta != null) {\n        model.meta = rec.meta;\n      }\n      if (rec.links != null) {\n        model.links = rec.links;\n      }\n      if (rec.relationships != null) {\n        for (let key in rec.relationships) {\n          const rel = rec.relationships[key];\n          const {\n            data\n          } = rel;\n          const {\n            links\n          } = rel;\n          const {\n            meta\n          } = rel;\n          model[key] = null;\n          if (data == null && links == null) {\n            continue;\n          }\n          const resolve = ({\n            type,\n            id\n          }) => {\n            return this.find(type, id, models);\n          };\n          model[key] = data instanceof Array ? data.map(resolve) : data != null ? resolve(data) : {};\n\n          // Model of the relation\n          const currentModel = model[key];\n          if (currentModel != null) {\n            // retain the links and meta from the relationship entry\n            // use as underscore property name because the currentModel may also have a link and meta reference\n            currentModel._links = links || {};\n            currentModel._meta = meta || {};\n          }\n        }\n      }\n      if (typeAttribute) {\n        model.type = typeAttribute;\n      }\n      return model;\n    }\n    findRecord(type, id) {\n      return this.records.find(r => r.type === type && r.id === id);\n    }\n    findRecords(type) {\n      return this.records.filter(r => r.type === type);\n    }\n    find(type, id, models) {\n      if (models == null) {\n        models = {};\n      }\n      const rec = this.findRecord(type, id);\n      if (rec == null) {\n        return null;\n      }\n      if (!models[type]) {\n        models[type] = {};\n      }\n      return models[type][id] || this.toModel(rec, type, models);\n    }\n    findAll(type, models) {\n      if (models == null) {\n        models = {};\n      }\n      const recs = this.findRecords(type);\n      if (recs == null) {\n        return [];\n      }\n      recs.forEach(rec => {\n        if (!models[type]) {\n          models[type] = {};\n        }\n        return this.toModel(rec, type, models);\n      });\n      return Object.values(models[type] || {});\n    }\n    remove(type, id) {\n      const remove = record => {\n        const index = this.records.indexOf(record);\n        if (!(index < 0)) {\n          return this.records.splice(index, 1);\n        }\n      };\n      if (id != null) {\n        return remove(this.findRecord(type, id));\n      } else {\n        const records = this.findRecords(type);\n        return records.map(remove);\n      }\n    }\n    sync(body) {\n      const sync = data => {\n        if (data == null) {\n          return null;\n        }\n        const add = obj => {\n          const {\n            type,\n            id\n          } = obj;\n          this.remove(type, id);\n          const rec = new Record(obj);\n          this.records.push(rec);\n          return rec;\n        };\n        if (data instanceof Array) {\n          return data.map(add);\n        } else {\n          return add(data);\n        }\n      };\n      sync(body.included);\n      const recs = sync(body.data);\n      if (recs == null) {\n        return null;\n      }\n      const models = {};\n      let result = null;\n      if (recs instanceof Array) {\n        result = recs.map(rec => {\n          return this.toModel(rec, rec.type, models);\n        });\n      } else {\n        result = this.toModel(recs, recs.type, models);\n      }\n      if (Object.prototype.hasOwnProperty.call(body, 'links')) {\n        result.links = body.links;\n      }\n      if (Object.prototype.hasOwnProperty.call(body, 'meta')) {\n        result.meta = body.meta;\n      }\n      return result;\n    }\n  }\n  return Store;\n};","map":{"version":3,"names":["module","exports","Record","constructor","options","id","type","attributes","relationships","links","meta","Store","reset","records","toModel","rec","models","typeAttribute","model","Object","prototype","hasOwnProperty","call","key","rel","data","resolve","find","Array","map","currentModel","_links","_meta","findRecord","r","findRecords","filter","findAll","recs","forEach","values","remove","record","index","indexOf","splice","sync","body","add","obj","push","included","result"],"sources":["C:/Users/ASUS/Desktop/OFPPT 2023-2024/Mechbook/React-Redux/tennis-App/tennis-app/node_modules/yayson/src/yayson/store.js"],"sourcesContent":["module.exports = function () {\n  class Record {\n    constructor(options) {\n      ;({\n        id: this.id,\n        type: this.type,\n        attributes: this.attributes,\n        relationships: this.relationships,\n        links: this.links,\n        meta: this.meta,\n      } = options)\n    }\n  }\n\n  class Store {\n    //eslint-disable-next-line no-unused-vars\n    constructor(options) {\n      this.reset()\n    }\n\n    reset() {\n      this.records = []\n    }\n\n    toModel(rec, type, models) {\n      let typeAttribute\n      const model = { ...(rec.attributes || {}) }\n      if (model.type) {\n        typeAttribute = model.type\n      }\n\n      model.id = rec.id\n      model.type = rec.type\n      if (!models[type]) {\n        models[type] = {}\n      }\n      if (!models[type][rec.id]) {\n        models[type][rec.id] = model\n      }\n\n      if (Object.prototype.hasOwnProperty.call(model, 'meta')) {\n        model.attributes = { meta: model.meta }\n        delete model.meta\n      }\n\n      if (rec.meta != null) {\n        model.meta = rec.meta\n      }\n\n      if (rec.links != null) {\n        model.links = rec.links\n      }\n\n      if (rec.relationships != null) {\n        for (let key in rec.relationships) {\n          const rel = rec.relationships[key]\n          const { data } = rel\n          const { links } = rel\n          const { meta } = rel\n\n          model[key] = null\n          if (data == null && links == null) {\n            continue\n          }\n          const resolve = ({ type, id }) => {\n            return this.find(type, id, models)\n          }\n          model[key] = data instanceof Array ? data.map(resolve) : data != null ? resolve(data) : {}\n\n          // Model of the relation\n          const currentModel = model[key]\n\n          if (currentModel != null) {\n            // retain the links and meta from the relationship entry\n            // use as underscore property name because the currentModel may also have a link and meta reference\n            currentModel._links = links || {}\n            currentModel._meta = meta || {}\n          }\n        }\n      }\n\n      if (typeAttribute) {\n        model.type = typeAttribute\n      }\n      return model\n    }\n\n    findRecord(type, id) {\n      return this.records.find((r) => r.type === type && r.id === id)\n    }\n\n    findRecords(type) {\n      return this.records.filter((r) => r.type === type)\n    }\n\n    find(type, id, models) {\n      if (models == null) {\n        models = {}\n      }\n      const rec = this.findRecord(type, id)\n      if (rec == null) {\n        return null\n      }\n      if (!models[type]) {\n        models[type] = {}\n      }\n      return models[type][id] || this.toModel(rec, type, models)\n    }\n\n    findAll(type, models) {\n      if (models == null) {\n        models = {}\n      }\n      const recs = this.findRecords(type)\n      if (recs == null) {\n        return []\n      }\n      recs.forEach((rec) => {\n        if (!models[type]) {\n          models[type] = {}\n        }\n        return this.toModel(rec, type, models)\n      })\n      return Object.values(models[type] || {})\n    }\n\n    remove(type, id) {\n      const remove = (record) => {\n        const index = this.records.indexOf(record)\n        if (!(index < 0)) {\n          return this.records.splice(index, 1)\n        }\n      }\n\n      if (id != null) {\n        return remove(this.findRecord(type, id))\n      } else {\n        const records = this.findRecords(type)\n        return records.map(remove)\n      }\n    }\n\n    sync(body) {\n      const sync = (data) => {\n        if (data == null) {\n          return null\n        }\n        const add = (obj) => {\n          const { type, id } = obj\n          this.remove(type, id)\n          const rec = new Record(obj)\n          this.records.push(rec)\n          return rec\n        }\n\n        if (data instanceof Array) {\n          return data.map(add)\n        } else {\n          return add(data)\n        }\n      }\n\n      sync(body.included)\n      const recs = sync(body.data)\n\n      if (recs == null) {\n        return null\n      }\n\n      const models = {}\n      let result = null\n\n      if (recs instanceof Array) {\n        result = recs.map((rec) => {\n          return this.toModel(rec, rec.type, models)\n        })\n      } else {\n        result = this.toModel(recs, recs.type, models)\n      }\n\n      if (Object.prototype.hasOwnProperty.call(body, 'links')) {\n        result.links = body.links\n      }\n\n      if (Object.prototype.hasOwnProperty.call(body, 'meta')) {\n        result.meta = body.meta\n      }\n\n      return result\n    }\n  }\n\n  return Store\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}