{"ast":null,"code":"const camelToKebabCase = require('./utils/camel-to-kebab-case');\nmodule.exports = function ({\n  adapter,\n  models\n}) {\n  const addFindAll = (resources, resourceName) => {\n    resources[resourceName].findAll = ({\n      filter,\n      include,\n      sort,\n      page,\n      raw,\n      apiKey,\n      fetch,\n      apiHost,\n      apiProtocol\n    } = {}) => {\n      return adapter.get({\n        path: camelToKebabCase(resourceName),\n        filter,\n        include,\n        sort,\n        page,\n        apiKey,\n        fetch,\n        apiHost,\n        apiProtocol,\n        type: resourceName\n      });\n    };\n  };\n  const addFind = (resources, resourceName) => {\n    resources[resourceName].find = (id, {\n      include,\n      raw,\n      apiKey,\n      fetch,\n      apiHost,\n      apiProtocol\n    } = {}) => {\n      return adapter.get({\n        path: `${camelToKebabCase(resourceName)}/${id}`,\n        include,\n        raw,\n        apiKey,\n        fetch,\n        apiHost,\n        apiProtocol,\n        type: resourceName\n      });\n    };\n  };\n  const addCreate = (resources, resourceName) => {\n    resources[resourceName].create = (json, {\n      raw,\n      apiKey,\n      fetch,\n      apiHost,\n      apiProtocol\n    } = {}) => {\n      return adapter.post({\n        path: `${camelToKebabCase(resourceName)}`,\n        raw,\n        json,\n        apiKey,\n        fetch,\n        apiHost,\n        apiProtocol,\n        type: resourceName\n      });\n    };\n  };\n  const addDelete = (resources, resourceName) => {\n    resources[resourceName].delete = (id, {\n      raw,\n      apiKey,\n      fetch,\n      apiHost,\n      apiProtocol\n    } = {}) => {\n      return adapter.delete({\n        path: `${camelToKebabCase(resourceName)}/${id}`,\n        raw,\n        apiKey,\n        fetch,\n        apiHost,\n        apiProtocol,\n        type: resourceName\n      });\n    };\n  };\n  let resources = {};\n  resources = ['events', 'payments', 'tickets', 'webhooks', 'workspaces', 'contacts', 'categories', 'ticketBatches'].reduce((result, key) => {\n    result[key] = {};\n    addFindAll(result, key);\n    addFind(result, key);\n    return result;\n  }, resources);\n  resources = ['webhooks'].reduce((result, key) => {\n    addCreate(result, key);\n    addDelete(result, key);\n    return result;\n  }, resources);\n  resources = ['contacts', 'tickets'].reduce((result, key) => {\n    addCreate(result, key);\n    return result;\n  }, resources);\n  return resources;\n};","map":{"version":3,"names":["camelToKebabCase","require","module","exports","adapter","models","addFindAll","resources","resourceName","findAll","filter","include","sort","page","raw","apiKey","fetch","apiHost","apiProtocol","get","path","type","addFind","find","id","addCreate","create","json","post","addDelete","delete","reduce","result","key"],"sources":["C:/Users/ASUS/Desktop/OFPPT 2023-2024/Mechbook/React-Redux/tennis-App/tennis-app/node_modules/confetti/src/resources.js"],"sourcesContent":["const camelToKebabCase = require('./utils/camel-to-kebab-case')\n\nmodule.exports = function ({ adapter, models }) {\n  const addFindAll = (resources, resourceName) => {\n    resources[resourceName].findAll = ({\n      filter,\n      include,\n      sort,\n      page,\n      raw,\n      apiKey,\n      fetch,\n      apiHost,\n      apiProtocol,\n    } = {}) => {\n      return adapter.get({\n        path: camelToKebabCase(resourceName),\n        filter,\n        include,\n        sort,\n        page,\n        apiKey,\n        fetch,\n        apiHost,\n        apiProtocol,\n        type: resourceName,\n      })\n    }\n  }\n  const addFind = (resources, resourceName) => {\n    resources[resourceName].find = (\n      id,\n      { include, raw, apiKey, fetch, apiHost, apiProtocol } = {}\n    ) => {\n      return adapter.get({\n        path: `${camelToKebabCase(resourceName)}/${id}`,\n        include,\n        raw,\n        apiKey,\n        fetch,\n        apiHost,\n        apiProtocol,\n        type: resourceName,\n      })\n    }\n  }\n  const addCreate = (resources, resourceName) => {\n    resources[resourceName].create = (\n      json,\n      { raw, apiKey, fetch, apiHost, apiProtocol } = {}\n    ) => {\n      return adapter.post({\n        path: `${camelToKebabCase(resourceName)}`,\n        raw,\n        json,\n        apiKey,\n        fetch,\n        apiHost,\n        apiProtocol,\n        type: resourceName,\n      })\n    }\n  }\n  const addDelete = (resources, resourceName) => {\n    resources[resourceName].delete = (\n      id,\n      { raw, apiKey, fetch, apiHost, apiProtocol } = {}\n    ) => {\n      return adapter.delete({\n        path: `${camelToKebabCase(resourceName)}/${id}`,\n        raw,\n        apiKey,\n        fetch,\n        apiHost,\n        apiProtocol,\n        type: resourceName,\n      })\n    }\n  }\n\n  let resources = {}\n\n  resources = [\n    'events',\n    'payments',\n    'tickets',\n    'webhooks',\n    'workspaces',\n    'contacts',\n    'categories',\n    'ticketBatches',\n  ].reduce((result, key) => {\n    result[key] = {}\n    addFindAll(result, key)\n    addFind(result, key)\n    return result\n  }, resources)\n\n  resources = ['webhooks'].reduce((result, key) => {\n    addCreate(result, key)\n    addDelete(result, key)\n    return result\n  }, resources)\n\n  resources = ['contacts', 'tickets'].reduce((result, key) => {\n    addCreate(result, key)\n    return result\n  }, resources)\n\n  return resources\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}