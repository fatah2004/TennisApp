{"ast":null,"code":"const samples = {\n  category: {\n    raw: require('./category/raw'),\n    formatted: require('./category/formatted')\n  },\n  contact: {\n    raw: require('./contact/raw'),\n    formatted: require('./contact/formatted')\n  },\n  event: {\n    raw: require('./event/raw'),\n    formatted: require('./event/formatted')\n  },\n  image: {\n    raw: require('./image/raw'),\n    formatted: require('./image/formatted')\n  },\n  payment: {\n    raw: require('./payment/raw'),\n    formatted: require('./payment/formatted')\n  },\n  ticket: {\n    raw: require('./ticket/raw'),\n    formatted: require('./ticket/formatted')\n  },\n  webhook: {\n    raw: require('./webhook/raw'),\n    formatted: require('./webhook/formatted')\n  },\n  workspace: {\n    raw: require('./workspace/raw'),\n    formatted: require('./workspace/formatted')\n  },\n  ticketBatch: {\n    raw: require('./ticket-batch/raw'),\n    formatted: require('./ticket-batch/formatted')\n  }\n};\nmodule.exports = function () {\n  const getSample = model => {\n    const raw = samples[model].raw;\n    const formatted = samples[model].formatted;\n    const rawMultiple = {\n      data: [raw.data, raw.data]\n    };\n    const formattedMultiple = [JSON.parse(JSON.stringify(formatted)), JSON.parse(JSON.stringify(formatted))];\n    delete formattedMultiple[0].meta;\n    delete formattedMultiple[1].meta;\n    return {\n      single: {\n        formatted: formatted,\n        raw: raw\n      },\n      multiple: {\n        formatted: formattedMultiple,\n        raw: rawMultiple\n      }\n    };\n  };\n  const models = ['category', 'contact', 'event', 'image', 'payment', 'ticket', 'webhook', 'workspace', 'ticketBatch'];\n  return models.reduce((result, key) => {\n    result[key] = getSample(key);\n    return result;\n  }, {});\n};","map":{"version":3,"names":["samples","category","raw","require","formatted","contact","event","image","payment","ticket","webhook","workspace","ticketBatch","module","exports","getSample","model","rawMultiple","data","formattedMultiple","JSON","parse","stringify","meta","single","multiple","models","reduce","result","key"],"sources":["C:/Users/ASUS/Desktop/OFPPT 2023-2024/Mechbook/React-Redux/tennis-App/tennis-app/node_modules/confetti/src/models/samples/index.js"],"sourcesContent":["const samples = {\n  category: {\n    raw: require('./category/raw'),\n    formatted: require('./category/formatted'),\n  },\n  contact: {\n    raw: require('./contact/raw'),\n    formatted: require('./contact/formatted'),\n  },\n  event: {\n    raw: require('./event/raw'),\n    formatted: require('./event/formatted'),\n  },\n  image: {\n    raw: require('./image/raw'),\n    formatted: require('./image/formatted'),\n  },\n  payment: {\n    raw: require('./payment/raw'),\n    formatted: require('./payment/formatted'),\n  },\n  ticket: {\n    raw: require('./ticket/raw'),\n    formatted: require('./ticket/formatted'),\n  },\n  webhook: {\n    raw: require('./webhook/raw'),\n    formatted: require('./webhook/formatted'),\n  },\n  workspace: {\n    raw: require('./workspace/raw'),\n    formatted: require('./workspace/formatted'),\n  },\n  ticketBatch: {\n    raw: require('./ticket-batch/raw'),\n    formatted: require('./ticket-batch/formatted'),\n  },\n}\n\nmodule.exports = function () {\n  const getSample = (model) => {\n    const raw = samples[model].raw\n    const formatted = samples[model].formatted\n    const rawMultiple = { data: [raw.data, raw.data] }\n    const formattedMultiple = [\n      JSON.parse(JSON.stringify(formatted)),\n      JSON.parse(JSON.stringify(formatted)),\n    ]\n    delete formattedMultiple[0].meta\n    delete formattedMultiple[1].meta\n\n    return {\n      single: {\n        formatted: formatted,\n        raw: raw,\n      },\n      multiple: {\n        formatted: formattedMultiple,\n        raw: rawMultiple,\n      },\n    }\n  }\n\n  const models = [\n    'category',\n    'contact',\n    'event',\n    'image',\n    'payment',\n    'ticket',\n    'webhook',\n    'workspace',\n    'ticketBatch',\n  ]\n\n  return models.reduce((result, key) => {\n    result[key] = getSample(key)\n    return result\n  }, {})\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG;EACdC,QAAQ,EAAE;IACRC,GAAG,EAAEC,OAAO,CAAC,gBAAgB,CAAC;IAC9BC,SAAS,EAAED,OAAO,CAAC,sBAAsB;EAC3C,CAAC;EACDE,OAAO,EAAE;IACPH,GAAG,EAAEC,OAAO,CAAC,eAAe,CAAC;IAC7BC,SAAS,EAAED,OAAO,CAAC,qBAAqB;EAC1C,CAAC;EACDG,KAAK,EAAE;IACLJ,GAAG,EAAEC,OAAO,CAAC,aAAa,CAAC;IAC3BC,SAAS,EAAED,OAAO,CAAC,mBAAmB;EACxC,CAAC;EACDI,KAAK,EAAE;IACLL,GAAG,EAAEC,OAAO,CAAC,aAAa,CAAC;IAC3BC,SAAS,EAAED,OAAO,CAAC,mBAAmB;EACxC,CAAC;EACDK,OAAO,EAAE;IACPN,GAAG,EAAEC,OAAO,CAAC,eAAe,CAAC;IAC7BC,SAAS,EAAED,OAAO,CAAC,qBAAqB;EAC1C,CAAC;EACDM,MAAM,EAAE;IACNP,GAAG,EAAEC,OAAO,CAAC,cAAc,CAAC;IAC5BC,SAAS,EAAED,OAAO,CAAC,oBAAoB;EACzC,CAAC;EACDO,OAAO,EAAE;IACPR,GAAG,EAAEC,OAAO,CAAC,eAAe,CAAC;IAC7BC,SAAS,EAAED,OAAO,CAAC,qBAAqB;EAC1C,CAAC;EACDQ,SAAS,EAAE;IACTT,GAAG,EAAEC,OAAO,CAAC,iBAAiB,CAAC;IAC/BC,SAAS,EAAED,OAAO,CAAC,uBAAuB;EAC5C,CAAC;EACDS,WAAW,EAAE;IACXV,GAAG,EAAEC,OAAO,CAAC,oBAAoB,CAAC;IAClCC,SAAS,EAAED,OAAO,CAAC,0BAA0B;EAC/C;AACF,CAAC;AAEDU,MAAM,CAACC,OAAO,GAAG,YAAY;EAC3B,MAAMC,SAAS,GAAIC,KAAK,IAAK;IAC3B,MAAMd,GAAG,GAAGF,OAAO,CAACgB,KAAK,CAAC,CAACd,GAAG;IAC9B,MAAME,SAAS,GAAGJ,OAAO,CAACgB,KAAK,CAAC,CAACZ,SAAS;IAC1C,MAAMa,WAAW,GAAG;MAAEC,IAAI,EAAE,CAAChB,GAAG,CAACgB,IAAI,EAAEhB,GAAG,CAACgB,IAAI;IAAE,CAAC;IAClD,MAAMC,iBAAiB,GAAG,CACxBC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAClB,SAAS,CAAC,CAAC,EACrCgB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAClB,SAAS,CAAC,CAAC,CACtC;IACD,OAAOe,iBAAiB,CAAC,CAAC,CAAC,CAACI,IAAI;IAChC,OAAOJ,iBAAiB,CAAC,CAAC,CAAC,CAACI,IAAI;IAEhC,OAAO;MACLC,MAAM,EAAE;QACNpB,SAAS,EAAEA,SAAS;QACpBF,GAAG,EAAEA;MACP,CAAC;MACDuB,QAAQ,EAAE;QACRrB,SAAS,EAAEe,iBAAiB;QAC5BjB,GAAG,EAAEe;MACP;IACF,CAAC;EACH,CAAC;EAED,MAAMS,MAAM,GAAG,CACb,UAAU,EACV,SAAS,EACT,OAAO,EACP,OAAO,EACP,SAAS,EACT,QAAQ,EACR,SAAS,EACT,WAAW,EACX,aAAa,CACd;EAED,OAAOA,MAAM,CAACC,MAAM,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;IACpCD,MAAM,CAACC,GAAG,CAAC,GAAGd,SAAS,CAACc,GAAG,CAAC;IAC5B,OAAOD,MAAM;EACf,CAAC,EAAE,CAAC,CAAC,CAAC;AACR,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}